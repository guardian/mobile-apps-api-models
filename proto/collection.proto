// collection.proto
syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

package com.gu.mobile.mapi.models;
option swift_prefix="Blueprint";

message Palette {
    string accent_colour = 1;
    string background = 2;
    string comment_count = 3;
    string element_background = 4;
    string headline = 5;
    string immersive_kicker = 6;
    string main = 7;
    string media_background = 8;
    string media_icon = 9;
    string meta_text = 10;
    string pill = 11;
    string pillar = 12;
    string secondary = 13;
    string shadow = 14;
    string top_border = 15;
}

message Links {
    string related_uri = 1;
    string short_url = 2;
    string uri = 3;
    string web_uri = 4;
}

enum MediaType {
    MEDIA_TYPE_VIDEO = 0;
    MEDIA_TYPE_AUDIO = 1;
    MEDIA_TYPE_IMAGE = 2;
}

message Image {
    optional string alt_text = 1;
    optional string caption = 2;
    optional string credit = 3;
    optional int32 height = 4;
    string url_template = 6;
    optional int32 width = 7;
}

message Video {
    optional string alt_text = 1;
    optional string caption = 2;
    optional string credit = 3;
    optional int32 height = 4;
    optional string orientation = 5;
    string url = 6;
    optional int32 width = 7;
}

/**
 * This message is only applicable to live blogs.
 */
message LiveEvent {
    string id = 1;
    string title = 2;
    string body = 3;
    optional google.protobuf.Timestamp published_date = 4;
    optional google.protobuf.Timestamp last_updated_date = 5;
}

/**
 * This is a special type of container on a front that is delivered via editorial tools.
 * Thrashers are used to promote either features or commercial content.
 */
message Thrasher {
    string uri = 1;
}

message Branding {
    string branding_type = 1;
    string sponsor_name = 2;
    string logo = 3;
    string sponsor_uri = 4;
    string label = 5;
    string about_uri = 6;
}

/**
 * The rendering platform support object is required to support opening AR articles on native clients.
 * We don't return this message if the corresponding article cannot be rendered by the server (instead
 * only by legacy article templates).
 */
message RenderingPlatformSupport {
    string min_bridget_version = 1;
    string uri = 2;
}

message Article {
    string id = 1;
    optional string byline = 2;
    repeated Image images = 3;
    Links links = 4;
    optional string kicker = 5;
    string title = 6;
    optional string trail_text = 7;
    optional int32 rating = 8;
    optional int32 comment_count = 9;
    optional google.protobuf.Timestamp published_date = 10;
    optional google.protobuf.Timestamp last_updated_date = 11;
    optional MediaType media_type = 12;
    optional google.protobuf.Duration duration = 13; // Only expected for video or audio content.
    optional Image profile_image = 14; // MAPI will never return both images and a profile_image.
    repeated LiveEvent events = 15;
    optional Palette palette_light = 16;
    optional Palette palette_dark = 17;
    optional string apple_podcast_url = 18; // Only applicable to podcasts.
    optional string google_podcast_url = 19; // Only applicable to podcasts.
    optional string spotify_podcast_url = 20; // Only applicable to podcasts.
    repeated Video videos = 21;
    optional bool is_live = 22; // This is an indicator as to whether a live blog is still blogging, or if it's been closed.
    optional string pocket_cast_podcast_url = 23; // Only applicable to podcasts.
    optional RenderingPlatformSupport rendered_item_prod = 24;
    optional RenderingPlatformSupport rendered_item_beta = 25;
}

message Card {
    enum CardType {
        CARD_TYPE_ARTICLE = 0;
        CARD_TYPE_PODCAST = 1;
        CARD_TYPE_VIDEO = 2;
        CARD_TYPE_CROSSWORD = 3;
        CARD_TYPE_DISPLAY = 4; // Display cards have their own separate design (see figma designs for ref).
        CARD_TYPE_MOSTVIEWED = 5;
    }
    CardType type = 1;
    Article article = 2;
    optional bool boosted = 3; // Boosted cards show a boosted headline size and a main image that spans full width on mobile.
    optional bool compact = 4; // Compact cards don't show all the information that non-compact cards do, and tend to appear in a carousel.
    repeated Article sublinks = 5;
    optional string html_fallback = 6;
    /**
     * Individual cards can be branded (and not be part of a branded container). Cards that are branded tend to show the
     * sponsor logo and should be returned with a different palette.
     */
    optional Branding branding = 7;
    /**
     * Individual cards can be defined as "premium content". If premium_content is true then it implies the card should be
     * hidden from signed-in users (for example if the card has been paid for by an external sponsor).
     */
    optional bool premium_content = 8;
    optional Palette sublinks_palette_light = 9;
    optional Palette sublinks_palette_dark = 10;
}

message Column {
    /**
     * By default, if there are multiple cards in the cards array then it's expected that
     * the client will display these as stacked vertical elements.
     */
    repeated Card cards = 1;
    optional Palette palette_light = 2;
    optional Palette palette_dark = 3;
    int32 preferred_width = 4; // The card(s) in the column assume this preferred width.
}

message Row {
    enum RowType {
        ROW_TYPE_LAYOUT = 0; // Layout is the "default" way of laying out rows and columns.
        ROW_TYPE_CAROUSEL = 1;
        ROW_TYPE_THRASHER = 2;
    }
    repeated Column columns = 1;
    optional Palette palette_light = 2;
    optional Palette palette_dark = 3;
    /**
     * Tablet devices support a 4 column display, whereas mobile devices support a 2 column display.
     * If a mobile device receives a row with a preferred number of columns greater than 2, the additional
     * columns are "wrapped" onto an extra row (a bit like CSS flex-wrap).
     */
    int32 preferred_number_of_columns = 4;
    optional Thrasher thrasher = 5;
    RowType type = 6;
    optional string title = 7;
}

/**
 * The follow up message contains links to get more information about the collection.
 */
message FollowUp {
    enum FollowUpType {
        FOLLOW_UP_TYPE_LIST = 0;
        FOLLOW_UP_TYPE_FRONT = 1;
        FOLLOW_UP_TYPE_INAPP = 2;
    }
    FollowUpType type = 1;
    string uri = 2;
    /**
     * At the time of creation MAPI couldn't support blueprint versions of the follow-on
     * link so this field was marked as optional. As part of the migration work, MAPI will
     * eventually support blueprint endpoints for all follow on links.
     */
    optional string blueprint_uri = 3;
}

message Collection {
    string id = 1;
    /**
     * A palette at the collection level is currently mapped from MAPI's "navigation style".
     * It's specified when the look and feel of an entire container should be changed,
     * for example when a container is "branded" because the content has been paid for.
     */
    optional Palette palette_light = 2;
    optional Palette palette_dark = 3;
    /**
     * MAPI can technically return a list of empty rows. This might be because MAPI
     * doesn't support the specific content that's included in the collection. In this
     * case it's assumed the client will hide the entire collection from the reader.
     */
    repeated Row rows = 4;
    optional string title = 5;
    /**
     * We define branding at the collection level because certain containers require a
     * different look and feel, for example content published by Guardian Labs.
     */
    optional Branding branding = 6;
    /**
     * A container can be defined as "premium". Currently this is just for the Crosswords
     * container for which only premium users are allowed to access (although it is visible to
     * all users). Note that the Crosswords container is not curated by Editorial in the fronts
     * tool but instead created on the fly by MAPI.
     */
    optional bool premium_content = 7;
    optional FollowUp follow_up = 8;
}
