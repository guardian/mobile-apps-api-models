/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

import Foundation

import Thrift


public enum RowType : TEnum {
  case layout
  case carousel
  case thrasher

  public static func read(from proto: TProtocol) throws -> RowType {
    let raw: Int32 = try proto.read()
    let new = RowType(rawValue: raw)
    if let unwrapped = new {
      return unwrapped
    } else {
      throw TProtocolError(error: .invalidData,
                           message: "Invalid enum value (\(raw)) for \(RowType.self)")
    }
  }

  public init() {
    self = .layout
  }

  public var rawValue: Int32 {
    switch self {
    case .layout: return 0
    case .carousel: return 1
    case .thrasher: return 2
    }
  }

  public init?(rawValue: Int32) {
    switch rawValue {
    case 0: self = .layout
    case 1: self = .carousel
    case 2: self = .thrasher
    default: return nil
    }
  }
}

public enum CardType : TEnum {
  case article
  case podcast
  case video

  public static func read(from proto: TProtocol) throws -> CardType {
    let raw: Int32 = try proto.read()
    let new = CardType(rawValue: raw)
    if let unwrapped = new {
      return unwrapped
    } else {
      throw TProtocolError(error: .invalidData,
                           message: "Invalid enum value (\(raw)) for \(CardType.self)")
    }
  }

  public init() {
    self = .article
  }

  public var rawValue: Int32 {
    switch self {
    case .article: return 0
    case .podcast: return 1
    case .video: return 2
    }
  }

  public init?(rawValue: Int32) {
    switch rawValue {
    case 0: self = .article
    case 1: self = .podcast
    case 2: self = .video
    default: return nil
    }
  }
}

public enum MediaType : TEnum {
  case video
  case audio
  case image

  public static func read(from proto: TProtocol) throws -> MediaType {
    let raw: Int32 = try proto.read()
    let new = MediaType(rawValue: raw)
    if let unwrapped = new {
      return unwrapped
    } else {
      throw TProtocolError(error: .invalidData,
                           message: "Invalid enum value (\(raw)) for \(MediaType.self)")
    }
  }

  public init() {
    self = .video
  }

  public var rawValue: Int32 {
    switch self {
    case .video: return 0
    case .audio: return 1
    case .image: return 2
    }
  }

  public init?(rawValue: Int32) {
    switch rawValue {
    case 0: self = .video
    case 1: self = .audio
    case 2: self = .image
    default: return nil
    }
  }
}

public final class Palette {

  public var accentColour: String

  public var background: String

  public var commentCount: String

  public var elementBackground: String

  public var headline: String

  public var immersiveKicker: String

  public var main: String

  public var mediaBackground: String

  public var mediaIcon: String

  public var metaText: String

  public var pill: String

  public var pillar: String

  public var secondary: String

  public var shadow: String

  public var topBorder: String


  public init(accentColour: String, background: String, commentCount: String, elementBackground: String, headline: String, immersiveKicker: String, main: String, mediaBackground: String, mediaIcon: String, metaText: String, pill: String, pillar: String, secondary: String, shadow: String, topBorder: String) {
    self.accentColour = accentColour
    self.background = background
    self.commentCount = commentCount
    self.elementBackground = elementBackground
    self.headline = headline
    self.immersiveKicker = immersiveKicker
    self.main = main
    self.mediaBackground = mediaBackground
    self.mediaIcon = mediaIcon
    self.metaText = metaText
    self.pill = pill
    self.pillar = pillar
    self.secondary = secondary
    self.shadow = shadow
    self.topBorder = topBorder
  }

}

public final class Links {

  public var relatedUri: String

  public var shortUrl: String

  public var uri: String

  public var webUri: String


  public init(relatedUri: String, shortUrl: String, uri: String, webUri: String) {
    self.relatedUri = relatedUri
    self.shortUrl = shortUrl
    self.uri = uri
    self.webUri = webUri
  }

}

public final class Image {

  public var altText: String?

  public var caption: String?

  public var credit: String?

  public var height: Int32

  public var orientation: String

  public var urlTemplate: String

  public var width: Int32


  public init(height: Int32, orientation: String, urlTemplate: String, width: Int32) {
    self.height = height
    self.orientation = orientation
    self.urlTemplate = urlTemplate
    self.width = width
  }

  public init(altText: String?, caption: String?, credit: String?, height: Int32, orientation: String, urlTemplate: String, width: Int32) {
    self.altText = altText
    self.caption = caption
    self.credit = credit
    self.height = height
    self.orientation = orientation
    self.urlTemplate = urlTemplate
    self.width = width
  }

}

public final class Article {

  public var id: String

  public var byline: String?

  public var images: TList<Image>?

  public var links: Links

  public var kicker: String?

  public var title: String

  public var trailText: String?

  public var rating: Int16?

  public var commentCount: Int32?

  public var publishedDate: String?

  public var lastUpdatedDate: String?

  public var mediaType: MediaType?

  public var durationInSeconds: Int32?

  public var profileImage: Image?

  public var events: TList<LiveEvent>?

  public var paletteLight: Palette?

  public var paletteDark: Palette?


  public init(id: String, links: Links, title: String) {
    self.id = id
    self.links = links
    self.title = title
  }

  public init(id: String, byline: String?, images: TList<Image>?, links: Links, kicker: String?, title: String, trailText: String?, rating: Int16?, commentCount: Int32?, publishedDate: String?, lastUpdatedDate: String?, mediaType: MediaType?, durationInSeconds: Int32?, profileImage: Image?, events: TList<LiveEvent>?, paletteLight: Palette?, paletteDark: Palette?) {
    self.id = id
    self.byline = byline
    self.images = images
    self.links = links
    self.kicker = kicker
    self.title = title
    self.trailText = trailText
    self.rating = rating
    self.commentCount = commentCount
    self.publishedDate = publishedDate
    self.lastUpdatedDate = lastUpdatedDate
    self.mediaType = mediaType
    self.durationInSeconds = durationInSeconds
    self.profileImage = profileImage
    self.events = events
    self.paletteLight = paletteLight
    self.paletteDark = paletteDark
  }

}

public final class LiveEvent {

  public var id: String

  public var title: String

  public var body: String

  public var publishedDate: String?

  public var lastUpdatedDate: String?


  public init(id: String, title: String, body: String) {
    self.id = id
    self.title = title
    self.body = body
  }

  public init(id: String, title: String, body: String, publishedDate: String?, lastUpdatedDate: String?) {
    self.id = id
    self.title = title
    self.body = body
    self.publishedDate = publishedDate
    self.lastUpdatedDate = lastUpdatedDate
  }

}

public final class Card {

  public var articles: TList<Article>

  public var paletteLight: Palette?

  public var paletteDark: Palette?

  public var type: CardType

  public var boosted: Bool?

  public var compact: Bool?

  public var sublinks: TList<Article>?


  public init(articles: TList<Article>, type: CardType) {
    self.articles = articles
    self.type = type
  }

  public init(articles: TList<Article>, paletteLight: Palette?, paletteDark: Palette?, type: CardType, boosted: Bool?, compact: Bool?, sublinks: TList<Article>?) {
    self.articles = articles
    self.paletteLight = paletteLight
    self.paletteDark = paletteDark
    self.type = type
    self.boosted = boosted
    self.compact = compact
    self.sublinks = sublinks
  }

}

public final class Column {

  public var cards: TList<Card>

  public var paletteLight: Palette?

  public var paletteDark: Palette?

  public var preferredWidth: Int32


  public init(cards: TList<Card>, preferredWidth: Int32) {
    self.cards = cards
    self.preferredWidth = preferredWidth
  }

  public init(cards: TList<Card>, paletteLight: Palette?, paletteDark: Palette?, preferredWidth: Int32) {
    self.cards = cards
    self.paletteLight = paletteLight
    self.paletteDark = paletteDark
    self.preferredWidth = preferredWidth
  }

}

public final class Thrasher {

  public var uri: String


  public init(uri: String) {
    self.uri = uri
  }

}

public final class Row {

  public var columns: TList<Column>?

  public var paletteLight: Palette?

  public var paletteDark: Palette?

  public var preferredNumberOfColumns: Int32?

  public var thrasher: Thrasher?

  public var type: RowType


  public init(type: RowType) {
    self.type = type
  }

  public init(columns: TList<Column>?, paletteLight: Palette?, paletteDark: Palette?, preferredNumberOfColumns: Int32?, thrasher: Thrasher?, type: RowType) {
    self.columns = columns
    self.paletteLight = paletteLight
    self.paletteDark = paletteDark
    self.preferredNumberOfColumns = preferredNumberOfColumns
    self.thrasher = thrasher
    self.type = type
  }

}

public final class Collection {

  public var id: String

  public var paletteLight: Palette?

  public var paletteDark: Palette?

  public var rows: TList<Row>

  public var title: String?


  public init(id: String, rows: TList<Row>) {
    self.id = id
    self.rows = rows
  }

  public init(id: String, paletteLight: Palette?, paletteDark: Palette?, rows: TList<Row>, title: String?) {
    self.id = id
    self.paletteLight = paletteLight
    self.paletteDark = paletteDark
    self.rows = rows
    self.title = title
  }

}


